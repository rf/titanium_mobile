Anvil test framework

DESCRIPTION:
Anvil is a testing framework that replaces the old Drillbit testing framework.  The anvil test
framework no longer depends on the old titanium desktop product and is now written entirely in 
Javascript using titanium and node.js.

Anvil is made up of the following subcomponents:
1) Hub - web service that provides reporting, CI integration and remote control of overall test 
process.  It will be possible for the hub to kick off a test run by notifying the drivers to start 
off a test.
2) Driver - a node.js process that builds, deploys and manages a harness that runs on device or 
simulator
3) Harness - titanium app that runs on device or simulator and contains all the actual test suites
that make up a anvil test pass


HUB:
To be defined once the hub implementation is finished.


DRIVER:
The role of the driver is to run the harness on device or simulator and get results back.  To that 
end, the driver is capable of creating a test harness from a template, building it, installing 
to device or simulator, running specified suites or tests and getting results back.

When running the driver, a logging level can be set that will control the level of detail printed 
to stdout.  The --log-level property can take "quiet", "normal" (default) or "verbose".  Log level 
"quiet" tells the driver to only print test results summary and error output.  Log level "normal" 
tells the driver to print "quiet" content along with normal operation output (creating directory, 
etc).  Log level "verbose" tells the driver to print "quiet" and "normal" content along with all 
debug info such as output seen when calling the platform specific build scripts.

For each test run, the driver creates log files that live in a logs directory under a configurable 
temp location that is usually:
"/tmp/driver/logs/<platform>/log_<month>-<day>-<year>_<hour>-<minute>-<second>-<millisecond>"

Logs are rotated (oldest deleted) as needed per platform based on a configuration property set in 
driver.js.  Logs contain all driver output regardless of the --log-level property specified when 
running the driver.

A normal driver run follows this general flow:
1) Build harness based on config
2) Install harness to device / simulator
3) Establish connection between driver and harness (socket for Android/iOS and http request/response 
chain for mobile web).
4) Driver asks harness for list of suites via connection established in step #3
5) Driver asks harness for list of tests in current suite
6) Driver tells the harness to run the current test in the current suite
7) Harness returns results for specified test
8) repeat #6-7 till suite is finished and then go back to #5 until all suites have run
9) start over at #1 if there are more configurations to be run
10) once all configurations are done, print result summary

The Anvil Driver supports two modes of operation:
1) local mode - when started, the driver runs in a interactive mode that allows the user to run 
commands via a command line interface.  It is also possible to run the driver in "one shot" local 
mode that does not start a command line interface but instead takes a command to run as a command 
line argument passed in when the driver is started.  This second mode is useful when trying to run 
a specific driver task from another script where command line interaction is not possible. 

Commands vary based on the platform that the driver is being run for but in general the commands 
supported are: create, build and start.  start is the main command that will be used for running 
tests and it will automatically uninstall an existing harness, create a new harness instance, 
deploy it to device or simulator, run the harness and report the results back.  When running the 
"start" command, the following arguments can be specified:
- "--config=<config id>": specifies the configuration (specific app.js and tiapp.xml) to run
- "--suite=<suite name>": specifies the test suite to be run
- "--test=<test name>": specifies the individual test to be run ("--suite" must be specified for 
this to take effect)

** it should be noted that driver testing for Mobile Web occurs only on Android devices currently

2) remote mode - when the driver is started in remote mode, the driver will run in the background 
and maintain a socket connection with the hub.  Once this connection is established, the hub will 
be able to send the Driver commands the same as if a user was interacting with the Driver in 
local mode.



HARNESS:
The harness can be thought of as a titanium app that runs various tests suites.  This component is 
what is actually deployed to device or simulator and executed.  The harness is build according to 
a template that is stored in the "driver/harnessTemplate" directory and all tests to be run should 
be included in the harness template directory.

The general operation of the harness is command based from the driver.  For example:  when the 
driver starts the harness, the driver will ask for a list of test suites from the harness and the 
harness will provide said list.  The driver will then ask the harness for a list of tests for a 
specific suite and then tell the harness to execute each test in turn.  The driver "drives" the 
harness so that it can manage timeout behavior and limit runs to specific suites and tests.

The harness is structured in a tier of manifest info.  The app.js file within the harness contains 
a list of test suites to run and each test suite (each js file in the "Resources/suites" directory 
is a test suite) contains a list of individual tests within the suite to run.

Regarding configurations, a configuration is a combination of an app.js file and a tiapp.xml file.
Allowing for various configurations allows certain test suites to be run against specific tiapp.xml 
configurations or multiple configurations.  

In a normal test run (no specific configuration selected) for each configuration listed in the 
"harnessTemplate/configs" a new Titanium mobile application will be created for deployment to 
device or simulator.  Each of these harness apps will contain the "harnessTemplate/Resources" 
directory along with the app.js and tiapp.xml file found in "harnessTemplate/configs/<config>".

Harness apps based on the configurations are create in a configurable temp directory such as:
"/tmp/driver/harness/<platform>/harness"

In order to add new suites to the harness, a new javascript file representing the suite should be
added to the "harnessTemplate/Resources/suites" directory.  An example/template for a suite exists 
at the top level driver directory.

In order to add new tests to a suite, the test should be added to the "tests" array within the 
desired suite.  An example of this can be seen in the example suite file a the top level driver 
directory.


SETUP NOTES:
- In order to run the driver, node.js must be installed on the system where it is being run.  Last 
validated node.js version is v0.6.17
- testing for mobile web and Android require adb to be present.  If you are unable to plug in a 
android device via usb and type "adb logcat" there is likely an environment issue
-driver testing for mobile web requires that your driver instance listen for http connections on
an address that can be hit via a android test device on the same wifi network.  These driver 
configuration properties (not to be confused with harness configurations) currently can be set in 
the config.js file (creation instructions provided on launch if it does not exist) and the app.js 
file for the harness
-driver testing for ios uses the simulator only currently so no special dependency exists
-often times when running android/mw tests, switching to ios testing and then back to android/mw 
problems can be encountered in terms of adb and device connection.  when switching back from ios 
to android/mw it is suggested that adb be started (type "adb devices") and the device be unplugged 
and replugged in so that the connection is "reset"


USAGE:
	Driver:
		"node driver.js --mode=<mode> --platform=<platform> [--log-level=<level>][--command=<command>]"

		- mode argument can be: "local" or "remote"
		- platform argument can be: "android", "ios" or "mw" (mobile web)


		EXAMPLE:
		- start driver in local mode for the android platform
			"node driver.js --mode=local --platform=android"

		- start driver in local mode for the mobile web platform with result summary only logging
			"node driver.js --mode=local --platform=mw --log-level=quiet"

		- start driver with one shot command for ios platform that will only run the suite "x" 
		for configuration "1"
			'node driver.js --mode=local --platform=ios --command="start --config=1 --suite=x"'


	Harness examples (via command line interface once driver is started or startup arguments when 
	starting the driver):
		- start test run for ONLY configuration "1"
			"start --config=1"

		- start test run for ALL configurations
			"start"

		- start test run for ALL configurations but only run the "x" test suite if it exists
		in each of the configurations
			"start --suite=x"

		- start test run for configuration "1", suite "y" and test "z"
			"start --config=1 --suite=y --test=z"

		- attempt to start a test run for all configurations and suites but only run the test "z" 
		in each.  this DOES NOT WORK.  a --test argument is ignored unless a valid --suite argument 
		is also specified
			"start --test=z"

